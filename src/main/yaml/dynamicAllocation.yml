incarnation: protelis

variables:
  Seed: &Seed
    min: 0
    max: 2
    step: 1
    default: 100
  ConnectionDistance: &ConnectionDistance
    formula: 100
  MaxLatitude:
    formula: 44.14795317094557
  MinLatitude: &MinLatitude
    formula: 44.13340676305022
  MaxLongitude:
    formula: 12.267570291912632
  MinLongitude: &MinLongitude
    formula: 12.235568921311268
  LatitudeSpace: &LatitudeSpace
    formula: MaxLatitude - MinLatitude
  LongitudeSpace: &LongitudeSpace
    formula: MaxLongitude - MinLongitude
  PoiCount: &PoiCount
    formula: 15
  MaxTimeInPoi: &MaxTimeInPoi
    formula: 1800.0
  SimulationTime: &SimulationTime
    formula: 16 * 3600.0
  PeopleWithSmartphoneOnlyPercentage:
    formula: 0
  CloudEpi: &CloudEpi
    formula: 100.0E-9 #n Joules
  SmartphoneEpi: &SmartphoneEpi
    formula: 5.50E-9 # nJoules
  WearableEpi: &WearableEpi
    formula: 9.97E-10 # nJoules [Pixel Watch 2 -- Qualcomm SW5100]
  CloudOsInstructions: &CloudOsInstructions
    formula: 50_000 # Instructions
  SmartphoneOsInstructions: &SmartphoneOsInstructions
    formula: 31_250 # Instructions
  WearableOsInstructions: &WearableOsInstructions
    formula: 3_124 # Instructions
  GpsSensorInstructions:
    formula: 37_500 # Instructions !!!!!! FIXME
  CommunicationInstructions:
    formula: 6_250 # Instructions !!!!!! FIXME
  BehaviorInstructions:
    formula: 50_000 # Instructions !!!!!! FIXME
  SmartphoneStartupComponents: &SmartphoneStartupComponents
    language: kotlin
    formula: |
      import it.unibo.alchemist.model.*
      setOf(Behavior(BehaviorInstructions), GpsSensor(GpsSensorInstructions), Communication(CommunicationInstructions))
  SmartphoneBatteryCapacity: &SmartphoneBatteryCapacity
    formula: 4500.0 # mAh [Oneplus 9]
  WearableBatteryCapacity: &WearableBatteryCapacity
    formula: 306.0 # mAh [Pixel Watch 2]
  CloudCost: &CloudCost
    formula: 3.584 # $/hour [AWS EC2 m5.16xlarge]
  SmartphoneRechargeTime: &SmartphoneRechargeTime
    formula: 2.0 # minutes
  WearableRechargeTime: &WearableRechargeTime
    formula: 1.5 # minutes
  # --------------- Simulation Variables ---------------
  DeviceCount:
    formula: 1
#    type: ArbitraryVariable
#    parameters: [100, [100, 300]]
  Thresholds: &Thresholds
    type: ArbitraryVariable
    parameters: [[100.0, 100.0], [[0.0, 0.0], [10.0, 100.0], [20.0, 100.0], [30.0, 100.0], [40.0, 100.0], [100.0, 100.0]]]
  SwapPolicy: &SwapPolicy
    type: ArbitraryVariable
    parameters: [hybrid, [smartphone, wearable, hybrid]] # swap when discharged, or at fixed intervals (5% of battery each)
  # -----------------------------------------------------
  PeopleWithSmartphoneAndWearable: &PeopleWithSmartphoneAndWearable
    language: kotlin
    formula: |
      import kotlin.math.ceil
      ceil(DeviceCount * (1.0 - PeopleWithSmartphoneOnlyPercentage))
  PeopleWithSmartphoneOnly: &PeopleWithSmartphoneOnly
    language: kotlin
    formula: DeviceCount - PeopleWithSmartphoneAndWearable

seeds:
  scenario: *Seed
  simulation: *Seed

network-model:
  type: ConnectWithinDistance
  parameters: [*ConnectionDistance]

_programs:
  travelDistance: &travelDistance
    - time-distribution: 1
      type: Event
      actions:
        - type: TraveledDistanceAction
          parameters: [ ]

  configureNextPoi: &configureNextPoi
    - time-distribution: 0.5
      type: Event
      actions:
        - type: ConfigureNextPoi
          parameters: [*MaxTimeInPoi] # max 5 minutes in PoI

  moveToTarget: &moveToTarget
    - time-distribution: 1
      type: Event
      actions:
        - type: TargetMapWalker
          parameters: [MovementTarget, 1.4]

  smartphonePulverization: &smartphonePulverization
    - time-distribution: 1.0
      type: Event
      actions:
        - type: PulverizationAction
          parameters: [*Thresholds, *SwapPolicy, *SmartphoneBatteryCapacity, *WearableBatteryCapacity]

  cloudPulverization: &cloudPulverization
    - time-distribution: 1.0
      type: Event
      actions:
        - type: PulverizationCloudAction
          parameters: [ *CloudCost ]

deployments:
  # People with smartphone only
  - type: Rectangle
    parameters: [*PeopleWithSmartphoneOnly, *MinLatitude, *MinLongitude, *LatitudeSpace, *LongitudeSpace]
    programs:
      - *travelDistance
      - *moveToTarget
      - *configureNextPoi
      - *smartphonePulverization
    properties:
      - type: SmartphoneConsumptionModel
        parameters: [*SmartphoneEpi, *SmartphoneOsInstructions, *SmartphoneStartupComponents, *SmartphoneBatteryCapacity, *SmartphoneRechargeTime]
    contents:
      - molecule: Person
        concentration: true
      - molecule: IsMoving
        concentration: true
      - molecule: SmartphoneBatteryCapacity
        concentration: *SmartphoneBatteryCapacity
  # People with smartphone and wearable
  - type: Rectangle
    parameters: [ *PeopleWithSmartphoneAndWearable, *MinLatitude, *MinLongitude, *LatitudeSpace, *LongitudeSpace ]
    programs:
      - *travelDistance
      - *moveToTarget
      - *configureNextPoi
      - *smartphonePulverization
    properties:
      - type: SmartphoneConsumptionModel
        parameters: [*SmartphoneEpi, *SmartphoneOsInstructions, *SmartphoneStartupComponents, *SmartphoneBatteryCapacity, *SmartphoneRechargeTime]
      - type: WearableConsumptionModel
        parameters: [*WearableEpi, *WearableOsInstructions, *WearableBatteryCapacity, *WearableRechargeTime]
    contents:
      - molecule: Person
        concentration: true
      - molecule: IsMoving
        concentration: true
      - molecule: SmartphoneBatteryCapacity
        concentration: *SmartphoneBatteryCapacity
      - molecule: WearableBatteryCapacity
        concentration: *WearableBatteryCapacity
  # Cloud instances
  - type: Point
    parameters: [44.14895317094557, 12.268570291912632]
    programs:
      - *cloudPulverization
    properties:
      - type: CloudConsumptionModel
        parameters: [*CloudEpi, *CloudOsInstructions]
    contents:
      - molecule: CloudInstance
        concentration: true
  # Displace the PoIs into the map
  - type: Rectangle
    parameters: [*PoiCount, *MinLatitude, *MinLongitude, *LatitudeSpace, *LongitudeSpace]
    contents:
      - molecule: PoI
        concentration: true

environment:
  type: OSMEnvironment
  parameters: ["cesena.pbf", true, true]

export:
  - type: CSVExporter
    parameters:
      exportPath: "data"
      fileNameRoot: "dynamic"
      interval: 60
    data:
      - time
      - molecule: IsMoving
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: SmartphoneCurrentCapacity
        aggregators: [mean, stddev]
        value-filter: "onlyFinite"
      - molecule: WearableCurrentCapacity
        aggregators: [mean, stddev]
        value-filter: "onlyFinite"
      - molecule: SmartphoneCharging
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: WearableCharging
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: SmartphoneComponentsTime
        aggregators: [ mean, sum, stddev ]
        value-filter: "onlyFinite"
      - molecule: WearableComponentsTime
        aggregators: [ mean, sum, stddev ]
        value-filter: "onlyFinite"
      - molecule: CloudComponentsTime
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: TraveledDistance
        aggregators: [mean, sum, min, max, stddev]
        value-filter: "onlyFinite"
      - molecule: CloudPower
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: SmartphonePower
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: WearablePower
        aggregators: [mean, sum, stddev]
        value-filter: "onlyFinite"
      - molecule: CloudCost
        aggregators: [sum]
        value-filter: "onlyFinite"
      - molecule: CloudInstance
        aggregators: [sum]
        value-filter: "onlyFinite"
      - molecule: SmartphoneRechargeTime
        aggregators: [ mean ]
        value-filter: "onlyFinite"
      - molecule: WearableRechargeTime
        aggregators: [ mean ]
        value-filter: "onlyFinite"
      - type: SensorOffloadedInWearable
      - type: BehaviorOffloadedInCloud

terminate:
  type: AfterTime
  parameters: *SimulationTime
